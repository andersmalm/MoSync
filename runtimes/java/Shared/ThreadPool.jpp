/* Copyright (C) 2009 Mobile Sorcery AB

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2, as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
*/

#include "helpers.h"

import java.util.Vector;

final class ThreadPool {	//implements Executor
	public void execute(Runnable r) {
		WorkerThread wt = null;
		for(int i=0; i<mThreads.size(); i++) {
			WorkerThread temp = (WorkerThread)mThreads.elementAt(i);
			if(temp.isAvailable()) {
				wt = temp;
				break;
			}
		}
		if(wt == null) {	//no available threads; we must make another.
			wt = new WorkerThread();
			mThreads.addElement(wt);
		}
		wt.start(r);
		//wt is now unavailable until r.run() returns.
	}

	public void stopEverything() {
		for(int i=0; i<mThreads.size(); i++) {
			WorkerThread wt = (WorkerThread)mThreads.elementAt(i);
			wt.stopWT();
		}
	}

	private Vector mThreads = new Vector();
}

final class WorkerThread extends Thread {
	public WorkerThread() {
		start();
	}

	public boolean isAvailable() {
		return mR == null;
	}
	synchronized public void start(Runnable r) {
		MYASSERT(isAvailable());
		mR = r;
		notify();
	}
	synchronized public void stopWT() {
		quit = true;
		notify();
	}

	public void run() {
		try {
			while(!quit) {
				synchronized(this) { while(mR == null) {
					try {
						wait();
					} catch(InterruptedException e) {
					}
					if(quit)
						return;
				} }
				mR.run();
				mR = null;
			}
		} catch(Throwable e) {
			PRINT_STACK_TRACE;
			MAMidlet.self.programError("Asynchronous error", e);
		}
	}

	private Runnable mR;
	private boolean quit = false;
}
